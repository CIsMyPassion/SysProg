
Ampel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008cb  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000734  00000000  00000000  00000b17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000315  00000000  00000000  0000124b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001560  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042f  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f6  00000000  00000000  000019e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001ad9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  88:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init>:
	red_yellow = yellow | red
} light_state;

void init()
{
	light_state = red_yellow;
  90:	8c e0       	ldi	r24, 0x0C	; 12
  92:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	*port |= (1 << bit_number);
}

inline void set_port(volatile uint8_t *port, uint8_t new_value)
{
	*port = new_value;
  96:	8c e1       	ldi	r24, 0x1C	; 28
  98:	84 b9       	out	0x04, r24	; 4
	*port &= ~(1 << bit_number);
}

inline void clear_port(volatile uint8_t *port)
{
	*port = 0x00;
  9a:	15 b8       	out	0x05, r1	; 5
  9c:	08 95       	ret

0000009e <delay_for_state>:
	set_port(&PORTB, light_state);
}

void delay_for_state()
{
	switch (light_state)
  9e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	91 f0       	breq	.+36     	; 0xca <delay_for_state+0x2c>
  a6:	18 f4       	brcc	.+6      	; 0xae <delay_for_state+0x10>
  a8:	84 30       	cpi	r24, 0x04	; 4
  aa:	29 f0       	breq	.+10     	; 0xb6 <delay_for_state+0x18>
  ac:	08 95       	ret
  ae:	8c 30       	cpi	r24, 0x0C	; 12
  b0:	61 f0       	breq	.+24     	; 0xca <delay_for_state+0x2c>
  b2:	80 31       	cpi	r24, 0x10	; 16
  b4:	99 f4       	brne	.+38     	; 0xdc <delay_for_state+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	83 ed       	ldi	r24, 0xD3	; 211
  ba:	90 e3       	ldi	r25, 0x30	; 48
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <delay_for_state+0x1e>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <delay_for_state+0x28>
  c6:	00 00       	nop
  c8:	08 95       	ret
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	83 ec       	ldi	r24, 0xC3	; 195
  ce:	99 e0       	ldi	r25, 0x09	; 9
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_for_state+0x32>
  d8:	00 c0       	rjmp	.+0      	; 0xda <delay_for_state+0x3c>
  da:	00 00       	nop
  dc:	08 95       	ret

000000de <set_new_state>:
	}
}

void set_new_state()
{
	switch (light_state)
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  e2:	88 30       	cpi	r24, 0x08	; 8
  e4:	61 f0       	breq	.+24     	; 0xfe <set_new_state+0x20>
  e6:	18 f4       	brcc	.+6      	; 0xee <set_new_state+0x10>
  e8:	84 30       	cpi	r24, 0x04	; 4
  ea:	69 f0       	breq	.+26     	; 0x106 <set_new_state+0x28>
  ec:	08 95       	ret
  ee:	8c 30       	cpi	r24, 0x0C	; 12
  f0:	71 f0       	breq	.+28     	; 0x10e <set_new_state+0x30>
  f2:	80 31       	cpi	r24, 0x10	; 16
  f4:	79 f4       	brne	.+30     	; 0x114 <set_new_state+0x36>
	{
		case green:
			light_state = yellow;
  f6:	88 e0       	ldi	r24, 0x08	; 8
  f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
  fc:	08 95       	ret
		case yellow:
			light_state = red;
  fe:	84 e0       	ldi	r24, 0x04	; 4
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
 104:	08 95       	ret
		case red:
			light_state = red_yellow;
 106:	8c e0       	ldi	r24, 0x0C	; 12
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
 10c:	08 95       	ret
		case red_yellow:
			light_state = green;
 10e:	80 e1       	ldi	r24, 0x10	; 16
 110:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 114:	08 95       	ret

00000116 <main>:
	}
}

int main(void)
{
	init();
 116:	0e 94 48 00 	call	0x90	; 0x90 <init>
	clear_port(&PORTB);
}

inline void switch_lights_for_state()
{
	set_port(&PORTB, light_state);
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
	*port |= (1 << bit_number);
}

inline void set_port(volatile uint8_t *port, uint8_t new_value)
{
	*port = new_value;
 11e:	85 b9       	out	0x05, r24	; 5
	init();
	
	while (1)
	{
		switch_lights_for_state();
		delay_for_state();
 120:	0e 94 4f 00 	call	0x9e	; 0x9e <delay_for_state>
		set_new_state();
 124:	0e 94 6f 00 	call	0xde	; 0xde <set_new_state>
 128:	f8 cf       	rjmp	.-16     	; 0x11a <main+0x4>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
