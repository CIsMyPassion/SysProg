
Doppel_Analog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000040e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800100  00800100  0000040e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dab  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000883  00000000  00000000  00001273  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000045d  00000000  00000000  00001af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  00001f54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067f  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000344  00000000  00000000  000026d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002a1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ac 31       	cpi	r26, 0x1C	; 28
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <main>
  88:	0c 94 cb 01 	jmp	0x396	; 0x396 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <analog_read_0>:
char adc0_string[7];
char adc1_string[7];

void analog_read_0(uint16_t adc_value)
{
	adc0_value = adc_value;
  90:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <adc0_value+0x1>
  94:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc0_value>
  98:	08 95       	ret

0000009a <analog_read_1>:
}

void analog_read_1(uint16_t adc_value)
{
	adc1_value = adc_value;
  9a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <adc1_value+0x1>
  9e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <adc1_value>
  a2:	08 95       	ret

000000a4 <analog_init>:
	Analog_Res_10_Bit
} Analog_Resolution;

void analog_init(Analog_Resolution resolution, Analog_Read_Handler adc0, Analog_Read_Handler adc1)
{
	adc0_handler = adc0;
  a4:	70 93 1b 01 	sts	0x011B, r23	; 0x80011b <adc0_handler+0x1>
  a8:	60 93 1a 01 	sts	0x011A, r22	; 0x80011a <adc0_handler>
	adc1_handler = adc1;
  ac:	50 93 05 01 	sts	0x0105, r21	; 0x800105 <adc1_handler+0x1>
  b0:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <adc1_handler>
	
	ADMUX = 0;
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	10 82       	st	Z, r1
	ADMUX |= (1 << REFS0);
  ba:	90 81       	ld	r25, Z
  bc:	90 64       	ori	r25, 0x40	; 64
  be:	90 83       	st	Z, r25
	
	if (resolution == Analog_Res_8_Bit)
  c0:	81 11       	cpse	r24, r1
  c2:	03 c0       	rjmp	.+6      	; 0xca <analog_init+0x26>
	{
		ADMUX |= (1 << ADLAR); // Right adjust for 8 bit resolution
  c4:	80 81       	ld	r24, Z
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	80 83       	st	Z, r24
	}
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // 128 prescale for 16Mhz
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	87 60       	ori	r24, 0x07	; 7
  d2:	80 83       	st	Z, r24
	
	ADCSRA |= (1 << ADEN);    // Enable the ADC
  d4:	80 81       	ld	r24, Z
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE);    // Enable Interrupts
  da:	80 81       	ld	r24, Z
  dc:	88 60       	ori	r24, 0x08	; 8
  de:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);    // Enable the first ADC conversion
  e0:	80 81       	ld	r24, Z
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <__vector_21>:
}

ISR(ADC_vect)
{
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	3f 93       	push	r19
  f6:	4f 93       	push	r20
  f8:	5f 93       	push	r21
  fa:	6f 93       	push	r22
  fc:	7f 93       	push	r23
  fe:	8f 93       	push	r24
 100:	9f 93       	push	r25
 102:	af 93       	push	r26
 104:	bf 93       	push	r27
 106:	ef 93       	push	r30
 108:	ff 93       	push	r31
	uint8_t adc_number = ADMUX & 0x0F; // Isolate the ADC channel number from the ADMUX register
 10a:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 10e:	2f 70       	andi	r18, 0x0F	; 15
	
	uint16_t adc_value = ADCL; // Read the low 8 bit of the ADC
 110:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	adc_value |= (ADCH << 8); // Read the high 8 bit of the ADC
 114:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	98 2f       	mov	r25, r24
 11c:	88 27       	eor	r24, r24
 11e:	83 2b       	or	r24, r19
	
	switch (adc_number)
 120:	22 23       	and	r18, r18
 122:	19 f0       	breq	.+6      	; 0x12a <__vector_21+0x42>
 124:	21 30       	cpi	r18, 0x01	; 1
 126:	61 f0       	breq	.+24     	; 0x140 <__vector_21+0x58>
 128:	15 c0       	rjmp	.+42     	; 0x154 <__vector_21+0x6c>
	{
		case 0:
			adc0_handler(adc_value); // Pass the ADC value to the handler function
 12a:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <adc0_handler>
 12e:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <adc0_handler+0x1>
 132:	09 95       	icall
			ADMUX++; //increment to the next ADC aka ADC1
 134:	ec e7       	ldi	r30, 0x7C	; 124
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	80 83       	st	Z, r24
			break;
 13e:	0a c0       	rjmp	.+20     	; 0x154 <__vector_21+0x6c>
		case 1:
			adc1_handler(adc_value); // Pass the ADC value to the handler function
 140:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <adc1_handler>
 144:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <adc1_handler+0x1>
 148:	09 95       	icall
			ADMUX &= 0xF8; //clear the last 4 bits to reset to ADC0
 14a:	ec e7       	ldi	r30, 0x7C	; 124
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	88 7f       	andi	r24, 0xF8	; 248
 152:	80 83       	st	Z, r24
			break;
	}
	
	ADCSRA |= (1 << ADSC);    // Enable the next ADC conversion
 154:	ea e7       	ldi	r30, 0x7A	; 122
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	80 64       	ori	r24, 0x40	; 64
 15c:	80 83       	st	Z, r24
	
}
 15e:	ff 91       	pop	r31
 160:	ef 91       	pop	r30
 162:	bf 91       	pop	r27
 164:	af 91       	pop	r26
 166:	9f 91       	pop	r25
 168:	8f 91       	pop	r24
 16a:	7f 91       	pop	r23
 16c:	6f 91       	pop	r22
 16e:	5f 91       	pop	r21
 170:	4f 91       	pop	r20
 172:	3f 91       	pop	r19
 174:	2f 91       	pop	r18
 176:	0f 90       	pop	r0
 178:	0f be       	out	0x3f, r0	; 63
 17a:	0f 90       	pop	r0
 17c:	1f 90       	pop	r1
 17e:	18 95       	reti

00000180 <__vector_18>:
typedef void (* Serial_Callback) (char);

Serial_Callback callback_function;

ISR (USART_RX_vect)
{
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	4f 93       	push	r20
 190:	5f 93       	push	r21
 192:	6f 93       	push	r22
 194:	7f 93       	push	r23
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	af 93       	push	r26
 19c:	bf 93       	push	r27
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
	if (callback_function != NULL) // Check if a callback is defined
 1a2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1aa:	30 97       	sbiw	r30, 0x00	; 0
 1ac:	19 f0       	breq	.+6      	; 0x1b4 <__vector_18+0x34>
	{
		callback_function(UDR0); // Execute the callback function
 1ae:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1b2:	09 95       	icall
	}
}
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	bf 91       	pop	r27
 1ba:	af 91       	pop	r26
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	7f 91       	pop	r23
 1c2:	6f 91       	pop	r22
 1c4:	5f 91       	pop	r21
 1c6:	4f 91       	pop	r20
 1c8:	3f 91       	pop	r19
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <main>:
}

inline void serial_set_baud_rate(Baudrate baudrate)
{
	uint16_t value = baudrate_value_for_register(baudrate);
	UBRR0H = (value >> 8); // Set the high 8 bit of the ubrr0 register
 1d6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = value; // Set the low 8 bit of the ubrr0 register
 1da:	87 e6       	ldi	r24, 0x67	; 103
 1dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	}
}

inline void serial_init()
{
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 1e0:	e1 ec       	ldi	r30, 0xC1	; 193
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	88 61       	ori	r24, 0x18	; 24
 1e8:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 1ea:	e2 ec       	ldi	r30, 0xC2	; 194
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	86 60       	ori	r24, 0x06	; 6
 1f2:	80 83       	st	Z, r24
	callback_function = NULL;
 1f4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1f8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
inline void setup()
{
	serial_set_baud_rate(BAUD_9600);
	serial_init();
	
	analog_init(Analog_Res_10_Bit, &analog_read_0, &analog_read_1);
 1fc:	4d e4       	ldi	r20, 0x4D	; 77
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	68 e4       	ldi	r22, 0x48	; 72
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 52 00 	call	0xa4	; 0xa4 <analog_init>
	
	sei();
 20a:	78 94       	sei
	adc1_value = adc_value;
}

inline void initialize_strings()
{
	*adc0_string = '0';
 20c:	e3 e1       	ldi	r30, 0x13	; 19
 20e:	f1 e0       	ldi	r31, 0x01	; 1
 210:	80 e3       	ldi	r24, 0x30	; 48
 212:	80 83       	st	Z, r24
	*(adc0_string + 1) = ':';
 214:	8a e3       	ldi	r24, 0x3A	; 58
 216:	81 83       	std	Z+1, r24	; 0x01
	
	*adc1_string = '1';
 218:	ea e0       	ldi	r30, 0x0A	; 10
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	91 e3       	ldi	r25, 0x31	; 49
 21e:	90 83       	st	Z, r25
	*(adc1_string + 1) = ':';
 220:	81 83       	std	Z+1, r24	; 0x01

inline uint8_t check_and_correct_printed_values()
{
	uint8_t changed = 0;
	
	if (adc0_value != adc0_printed_value)
 222:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <adc0_value>
 226:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <adc0_value+0x1>
 22a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <adc0_printed_value>
 22e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <adc0_printed_value+0x1>
 232:	28 17       	cp	r18, r24
 234:	39 07       	cpc	r19, r25
 236:	99 f0       	breq	.+38     	; 0x25e <main+0x88>
	{
		changed = 1;
		adc0_printed_value = adc0_value;
 238:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc0_value>
 23c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc0_value+0x1>
 240:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <adc0_printed_value+0x1>
 244:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <adc0_printed_value>
		
		itoa(adc0_value, adc0_string + 2, 10);
 248:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <adc0_value>
 24c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <adc0_value+0x1>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 250:	4a e0       	ldi	r20, 0x0A	; 10
 252:	65 e1       	ldi	r22, 0x15	; 21
 254:	71 e0       	ldi	r23, 0x01	; 1
 256:	0e 94 96 01 	call	0x32c	; 0x32c <__itoa_ncheck>
{
	uint8_t changed = 0;
	
	if (adc0_value != adc0_printed_value)
	{
		changed = 1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	01 c0       	rjmp	.+2      	; 0x260 <main+0x8a>
	initialize_strings();
}

inline uint8_t check_and_correct_printed_values()
{
	uint8_t changed = 0;
 25e:	80 e0       	ldi	r24, 0x00	; 0
		adc0_printed_value = adc0_value;
		
		itoa(adc0_value, adc0_string + 2, 10);
	}
	
	if (adc1_value != adc1_printed_value)
 260:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <adc1_value>
 264:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <adc1_value+0x1>
 268:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <adc1_printed_value>
 26c:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <adc1_printed_value+0x1>
 270:	42 17       	cp	r20, r18
 272:	53 07       	cpc	r21, r19
 274:	91 f0       	breq	.+36     	; 0x29a <main+0xc4>
	{
		changed = 1;
		adc1_printed_value = adc1_value;
 276:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <adc1_value>
 27a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <adc1_value+0x1>
 27e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <adc1_printed_value+0x1>
 282:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <adc1_printed_value>
		
		itoa(adc1_value, adc1_string + 2, 10);
 286:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <adc1_value>
 28a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <adc1_value+0x1>
 28e:	4a e0       	ldi	r20, 0x0A	; 10
 290:	6c e0       	ldi	r22, 0x0C	; 12
 292:	71 e0       	ldi	r23, 0x01	; 1
 294:	0e 94 96 01 	call	0x32c	; 0x32c <__itoa_ncheck>
		itoa(adc0_value, adc0_string + 2, 10);
	}
	
	if (adc1_value != adc1_printed_value)
	{
		changed = 1;
 298:	81 e0       	ldi	r24, 0x01	; 1
	
    while (1) 
    {
		uint8_t numbers_changed = check_and_correct_printed_values();
		
		if (numbers_changed)
 29a:	88 23       	and	r24, r24
 29c:	e9 f1       	breq	.+122    	; 0x318 <main+0x142>
	UBRR0L = value; // Set the low 8 bit of the ubrr0 register
}

inline void serial_send_char(uint8_t value)
{
	while ( !(UCSR0A & (1 << UDRE0)) ) ; // Wait until a new character can be send
 29e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2a2:	85 ff       	sbrs	r24, 5
 2a4:	fc cf       	rjmp	.-8      	; 0x29e <main+0xc8>
	UDR0 = value; // Send the character
 2a6:	8c e0       	ldi	r24, 0x0C	; 12
 2a8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2ac:	e3 e1       	ldi	r30, 0x13	; 19
 2ae:	f1 e0       	ldi	r31, 0x01	; 1
 2b0:	07 c0       	rjmp	.+14     	; 0x2c0 <main+0xea>
}

inline void serial_send_string(uint8_t *message)
{
	while(*message) // Loop through the string and send every character
		serial_send_char(*message ++);
 2b2:	31 96       	adiw	r30, 0x01	; 1
	UBRR0L = value; // Set the low 8 bit of the ubrr0 register
}

inline void serial_send_char(uint8_t value)
{
	while ( !(UCSR0A & (1 << UDRE0)) ) ; // Wait until a new character can be send
 2b4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2b8:	85 ff       	sbrs	r24, 5
 2ba:	fc cf       	rjmp	.-8      	; 0x2b4 <main+0xde>
	UDR0 = value; // Send the character
 2bc:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	serial_send_char(0x0c); // Send the clear control character
}

inline void serial_send_string(uint8_t *message)
{
	while(*message) // Loop through the string and send every character
 2c0:	90 81       	ld	r25, Z
 2c2:	91 11       	cpse	r25, r1
 2c4:	f6 cf       	rjmp	.-20     	; 0x2b2 <main+0xdc>
	UBRR0L = value; // Set the low 8 bit of the ubrr0 register
}

inline void serial_send_char(uint8_t value)
{
	while ( !(UCSR0A & (1 << UDRE0)) ) ; // Wait until a new character can be send
 2c6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2ca:	85 ff       	sbrs	r24, 5
 2cc:	fc cf       	rjmp	.-8      	; 0x2c6 <main+0xf0>
	UDR0 = value; // Send the character
 2ce:	8d e0       	ldi	r24, 0x0D	; 13
 2d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	UBRR0L = value; // Set the low 8 bit of the ubrr0 register
}

inline void serial_send_char(uint8_t value)
{
	while ( !(UCSR0A & (1 << UDRE0)) ) ; // Wait until a new character can be send
 2d4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2d8:	85 ff       	sbrs	r24, 5
 2da:	fc cf       	rjmp	.-8      	; 0x2d4 <main+0xfe>
	UDR0 = value; // Send the character
 2dc:	8a e0       	ldi	r24, 0x0A	; 10
 2de:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2e2:	ea e0       	ldi	r30, 0x0A	; 10
 2e4:	f1 e0       	ldi	r31, 0x01	; 1
 2e6:	07 c0       	rjmp	.+14     	; 0x2f6 <main+0x120>
}

inline void serial_send_string(uint8_t *message)
{
	while(*message) // Loop through the string and send every character
		serial_send_char(*message ++);
 2e8:	31 96       	adiw	r30, 0x01	; 1
	UBRR0L = value; // Set the low 8 bit of the ubrr0 register
}

inline void serial_send_char(uint8_t value)
{
	while ( !(UCSR0A & (1 << UDRE0)) ) ; // Wait until a new character can be send
 2ea:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2ee:	85 ff       	sbrs	r24, 5
 2f0:	fc cf       	rjmp	.-8      	; 0x2ea <main+0x114>
	UDR0 = value; // Send the character
 2f2:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	serial_send_char(0x0c); // Send the clear control character
}

inline void serial_send_string(uint8_t *message)
{
	while(*message) // Loop through the string and send every character
 2f6:	90 81       	ld	r25, Z
 2f8:	91 11       	cpse	r25, r1
 2fa:	f6 cf       	rjmp	.-20     	; 0x2e8 <main+0x112>
	UBRR0L = value; // Set the low 8 bit of the ubrr0 register
}

inline void serial_send_char(uint8_t value)
{
	while ( !(UCSR0A & (1 << UDRE0)) ) ; // Wait until a new character can be send
 2fc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 300:	85 ff       	sbrs	r24, 5
 302:	fc cf       	rjmp	.-8      	; 0x2fc <main+0x126>
	UDR0 = value; // Send the character
 304:	8d e0       	ldi	r24, 0x0D	; 13
 306:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	UBRR0L = value; // Set the low 8 bit of the ubrr0 register
}

inline void serial_send_char(uint8_t value)
{
	while ( !(UCSR0A & (1 << UDRE0)) ) ; // Wait until a new character can be send
 30a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 30e:	85 ff       	sbrs	r24, 5
 310:	fc cf       	rjmp	.-8      	; 0x30a <main+0x134>
	UDR0 = value; // Send the character
 312:	8a e0       	ldi	r24, 0x0A	; 10
 314:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 318:	2f ef       	ldi	r18, 0xFF	; 255
 31a:	8d ee       	ldi	r24, 0xED	; 237
 31c:	92 e0       	ldi	r25, 0x02	; 2
 31e:	21 50       	subi	r18, 0x01	; 1
 320:	80 40       	sbci	r24, 0x00	; 0
 322:	90 40       	sbci	r25, 0x00	; 0
 324:	e1 f7       	brne	.-8      	; 0x31e <main+0x148>
 326:	00 c0       	rjmp	.+0      	; 0x328 <main+0x152>
 328:	00 00       	nop
 32a:	7b cf       	rjmp	.-266    	; 0x222 <main+0x4c>

0000032c <__itoa_ncheck>:
 32c:	bb 27       	eor	r27, r27
 32e:	4a 30       	cpi	r20, 0x0A	; 10
 330:	31 f4       	brne	.+12     	; 0x33e <__itoa_ncheck+0x12>
 332:	99 23       	and	r25, r25
 334:	22 f4       	brpl	.+8      	; 0x33e <__itoa_ncheck+0x12>
 336:	bd e2       	ldi	r27, 0x2D	; 45
 338:	90 95       	com	r25
 33a:	81 95       	neg	r24
 33c:	9f 4f       	sbci	r25, 0xFF	; 255
 33e:	0c 94 a2 01 	jmp	0x344	; 0x344 <__utoa_common>

00000342 <__utoa_ncheck>:
 342:	bb 27       	eor	r27, r27

00000344 <__utoa_common>:
 344:	fb 01       	movw	r30, r22
 346:	55 27       	eor	r21, r21
 348:	aa 27       	eor	r26, r26
 34a:	88 0f       	add	r24, r24
 34c:	99 1f       	adc	r25, r25
 34e:	aa 1f       	adc	r26, r26
 350:	a4 17       	cp	r26, r20
 352:	10 f0       	brcs	.+4      	; 0x358 <__utoa_common+0x14>
 354:	a4 1b       	sub	r26, r20
 356:	83 95       	inc	r24
 358:	50 51       	subi	r21, 0x10	; 16
 35a:	b9 f7       	brne	.-18     	; 0x34a <__utoa_common+0x6>
 35c:	a0 5d       	subi	r26, 0xD0	; 208
 35e:	aa 33       	cpi	r26, 0x3A	; 58
 360:	08 f0       	brcs	.+2      	; 0x364 <__utoa_common+0x20>
 362:	a9 5d       	subi	r26, 0xD9	; 217
 364:	a1 93       	st	Z+, r26
 366:	00 97       	sbiw	r24, 0x00	; 0
 368:	79 f7       	brne	.-34     	; 0x348 <__utoa_common+0x4>
 36a:	b1 11       	cpse	r27, r1
 36c:	b1 93       	st	Z+, r27
 36e:	11 92       	st	Z+, r1
 370:	cb 01       	movw	r24, r22
 372:	0c 94 bb 01 	jmp	0x376	; 0x376 <strrev>

00000376 <strrev>:
 376:	dc 01       	movw	r26, r24
 378:	fc 01       	movw	r30, r24
 37a:	67 2f       	mov	r22, r23
 37c:	71 91       	ld	r23, Z+
 37e:	77 23       	and	r23, r23
 380:	e1 f7       	brne	.-8      	; 0x37a <strrev+0x4>
 382:	32 97       	sbiw	r30, 0x02	; 2
 384:	04 c0       	rjmp	.+8      	; 0x38e <strrev+0x18>
 386:	7c 91       	ld	r23, X
 388:	6d 93       	st	X+, r22
 38a:	70 83       	st	Z, r23
 38c:	62 91       	ld	r22, -Z
 38e:	ae 17       	cp	r26, r30
 390:	bf 07       	cpc	r27, r31
 392:	c8 f3       	brcs	.-14     	; 0x386 <strrev+0x10>
 394:	08 95       	ret

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
