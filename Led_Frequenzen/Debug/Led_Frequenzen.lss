
Led_Frequenzen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000902  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cf  00000000  00000000  00000aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000217  00000000  00000000  00001175  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000138c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000433  00000000  00000000  000013b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a5  00000000  00000000  000017e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
	*port |= (1 << bit_number);
}

inline void set_port(volatile uint8_t *port, uint8_t new_value)
{
	*port = new_value;
  96:	80 e2       	ldi	r24, 0x20	; 32
  98:	84 b9       	out	0x04, r24	; 4
	*port &= ~(1 << bit_number);
}

inline void clear_port(volatile uint8_t *port)
{
	*port = 0x00;
  9a:	1a b8       	out	0x0a, r1	; 10
	*port |= (1 << bit_number);
}

inline void set_port(volatile uint8_t *port, uint8_t new_value)
{
	*port = new_value;
  9c:	8c e0       	ldi	r24, 0x0C	; 12
  9e:	8b b9       	out	0x0b, r24	; 11
#ifndef PORT_OPERATIONS_H_
#define PORT_OPERATIONS_H_

inline void set_bit_for_port(volatile uint8_t *port, uint8_t bit_number)
{
	*port |= (1 << bit_number);
  a0:	85 b1       	in	r24, 0x05	; 5
  a2:	80 62       	ori	r24, 0x20	; 32
  a4:	85 b9       	out	0x05, r24	; 5
	set_bit_for_port(&OUTPUT_PORT, LED);	
}

inline void poll_buttons()
{
	if (read_inverted_bit_from_port(&INPUT_PORT, SLOW_BUTTON))
  a6:	4a 99       	sbic	0x09, 2	; 9
  a8:	03 c0       	rjmp	.+6      	; 0xb0 <main+0x1a>
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	85 b9       	out	0x05, r24	; 5
	{
		//OCR1A = calc_ocrn(slow,prescale);
		set_bit_for_port(&OUTPUT_PORT, LED);
	}
	
	if(read_inverted_bit_from_port(&INPUT_PORT, FAST_BUTTON))
  b0:	4b 99       	sbic	0x09, 3	; 9
  b2:	f9 cf       	rjmp	.-14     	; 0xa6 <main+0x10>
	*port = new_value;
}

inline void clear_bit_for_port(volatile uint8_t *port, uint8_t bit_number)
{
	*port &= ~(1 << bit_number);
  b4:	85 b1       	in	r24, 0x05	; 5
  b6:	8f 7d       	andi	r24, 0xDF	; 223
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	f5 cf       	rjmp	.-22     	; 0xa6 <main+0x10>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
