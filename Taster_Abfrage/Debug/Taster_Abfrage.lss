
Taster_Abfrage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069b  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000619  00000000  00000000  0000084b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000221  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001088  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034a  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001406  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init>:
#define INPUT_OPTION PORTD
#define INPUT PIND

void init()
{
	SET_BIT(DDRB, DDB5);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	80 62       	ori	r24, 0x20	; 32
  84:	84 b9       	out	0x04, r24	; 4
	
	CLEAR_BIT(DDRD, DDD2);
  86:	8a b1       	in	r24, 0x0a	; 10
  88:	8b 7f       	andi	r24, 0xFB	; 251
  8a:	8a b9       	out	0x0a, r24	; 10
	CLEAR_BIT(DDRD, DDD3);
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	87 7f       	andi	r24, 0xF7	; 247
  90:	8a b9       	out	0x0a, r24	; 10
	
	CLEAR_BIT(OUTPUT, LED);
  92:	85 b1       	in	r24, 0x05	; 5
  94:	8f 7d       	andi	r24, 0xDF	; 223
  96:	85 b9       	out	0x05, r24	; 5
	
	SET_BIT(INPUT_OPTION, ON_BUTTON);
  98:	8b b1       	in	r24, 0x0b	; 11
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	8b b9       	out	0x0b, r24	; 11
	SET_BIT(INPUT_OPTION, OFF_BUTTON);
  9e:	8b b1       	in	r24, 0x0b	; 11
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	8b b9       	out	0x0b, r24	; 11
  a4:	08 95       	ret

000000a6 <main>:
}

int main(void)
{
	init();
  a6:	0e 94 40 00 	call	0x80	; 0x80 <init>
	
	while (1)
	{
		if (READ_BIT(INPUT, ON_BUTTON))
  aa:	4a 9b       	sbis	0x09, 2	; 9
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <main+0xe>
		{
			SET_BIT(OUTPUT, LED);
  ae:	85 b1       	in	r24, 0x05	; 5
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	85 b9       	out	0x05, r24	; 5
		}
		
		if(READ_BIT(INPUT, OFF_BUTTON))
  b4:	4b 9b       	sbis	0x09, 3	; 9
  b6:	f9 cf       	rjmp	.-14     	; 0xaa <main+0x4>
		{
			CLEAR_BIT(OUTPUT, LED);
  b8:	85 b1       	in	r24, 0x05	; 5
  ba:	8f 7d       	andi	r24, 0xDF	; 223
  bc:	85 b9       	out	0x05, r24	; 5
  be:	f5 cf       	rjmp	.-22     	; 0xaa <main+0x4>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
