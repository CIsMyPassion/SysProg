
Taster_Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000094a  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000725  00000000  00000000  00000bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cc  00000000  00000000  00001323  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  000015f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043e  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000264  00000000  00000000  00001b42  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001da6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_1>
   8:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 ba 00 	call	0x174	; 0x174 <main>
  88:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <isr0>:
#ifndef PORT_OPERATIONS_H_
#define PORT_OPERATIONS_H_

inline void set_bit_for_port(volatile uint8_t *port, uint8_t bit_number)
{
	*port |= (1 << bit_number);
  90:	85 b1       	in	r24, 0x05	; 5
  92:	80 62       	ori	r24, 0x20	; 32
  94:	85 b9       	out	0x05, r24	; 5
  96:	08 95       	ret

00000098 <isr1>:
	*port = new_value;
}

inline void clear_bit_for_port(volatile uint8_t *port, uint8_t bit_number)
{
	*port &= ~(1 << bit_number);
  98:	85 b1       	in	r24, 0x05	; 5
  9a:	8f 7d       	andi	r24, 0xDF	; 223
  9c:	85 b9       	out	0x05, r24	; 5
  9e:	08 95       	ret

000000a0 <init_interrupt>:
	*port |= (1 << bit_number);
}

inline void set_port(volatile uint8_t *port, uint8_t new_value)
{
	*port = new_value;
  a0:	2a e0       	ldi	r18, 0x0A	; 10
  a2:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  a6:	23 e0       	ldi	r18, 0x03	; 3
  a8:	2d bb       	out	0x1d, r18	; 29
	uint8_t eimsk_byte = get_bitshifted_by(INT0) | get_bitshifted_by(INT1);
	uint8_t pind_byte = get_bitshifted_by(PORTD2) | get_bitshifted_by(PORTD3);
	
	set_port(&EICRA, eicra_byte);
	set_port(&EIMSK, eimsk_byte);
	PORTD |= pind_byte;
  aa:	2b b1       	in	r18, 0x0b	; 11
  ac:	2c 60       	ori	r18, 0x0C	; 12
  ae:	2b b9       	out	0x0b, r18	; 11
	
	interrupt0_handler = isr0;
  b0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <interrupt0_handler+0x1>
  b4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <interrupt0_handler>
	interrupt1_handler = isr1;
  b8:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  bc:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
  c0:	08 95       	ret

000000c2 <__vector_1>:
}

ISR (INT0_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	interrupt0_handler();
  e4:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <interrupt0_handler>
  e8:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <interrupt0_handler+0x1>
  ec:	09 95       	icall
}
  ee:	ff 91       	pop	r31
  f0:	ef 91       	pop	r30
  f2:	bf 91       	pop	r27
  f4:	af 91       	pop	r26
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	7f 91       	pop	r23
  fc:	6f 91       	pop	r22
  fe:	5f 91       	pop	r21
 100:	4f 91       	pop	r20
 102:	3f 91       	pop	r19
 104:	2f 91       	pop	r18
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <__vector_2>:

ISR (INT1_vect)
{
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	2f 93       	push	r18
 11c:	3f 93       	push	r19
 11e:	4f 93       	push	r20
 120:	5f 93       	push	r21
 122:	6f 93       	push	r22
 124:	7f 93       	push	r23
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
 12a:	af 93       	push	r26
 12c:	bf 93       	push	r27
 12e:	ef 93       	push	r30
 130:	ff 93       	push	r31
	interrupt1_handler();
 132:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 136:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13a:	09 95       	icall
}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	7f 91       	pop	r23
 14a:	6f 91       	pop	r22
 14c:	5f 91       	pop	r21
 14e:	4f 91       	pop	r20
 150:	3f 91       	pop	r19
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <init>:
	set_port(&PORTB, get_bitshifted_by(PORTB5));
}

void init()
{
	init_interrupt(&isr0, &isr1);
 15e:	6c e4       	ldi	r22, 0x4C	; 76
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	88 e4       	ldi	r24, 0x48	; 72
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 50 00 	call	0xa0	; 0xa0 <init_interrupt>
	sei();
 16a:	78 94       	sei
 16c:	80 e2       	ldi	r24, 0x20	; 32
 16e:	84 b9       	out	0x04, r24	; 4
 170:	85 b9       	out	0x05, r24	; 5
 172:	08 95       	ret

00000174 <main>:
	configure_led();
}

int main(void)
{
	init();
 174:	0e 94 af 00 	call	0x15e	; 0x15e <init>
 178:	ff cf       	rjmp	.-2      	; 0x178 <main+0x4>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
